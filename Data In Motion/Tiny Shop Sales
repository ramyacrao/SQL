

Which product has the highest price? Only return a single row.

SELECT 
    product_name
FROM 
    products 
WHERE 
    price IN (SELECT MAX(price)
              FROM products);

| product_name |
| ------------ |
| Product M    |

---

Which customer has made the most orders?

WITH order_count_ranked AS 
    (SELECT 
        customer_id,
        RANK() OVER(ORDER BY COUNT(DISTINCT order_id) DESC) AS order_count_rank
    FROM 
        orders
    GROUP BY 
        customer_id)
SELECT 
    first_name,
    last_name 
FROM 
    customers 
WHERE 
    customer_id IN (SELECT customer_id 
                    FROM order_count_ranked 
                    WHERE order_count_rank = 1);

| first_name | last_name |
| ---------- | --------- |
| John       | Doe       |
| Jane       | Smith     |
| Bob        | Johnson   |

---

What’s the total revenue per product?

    SELECT 
    	p.product_id,
        p.product_name,
        SUM(oi.quantity * p.price) AS revenue 
    FROM 
    	products p INNER JOIN order_items oi 
        ON 
        p.product_id = oi.product_id 
    GROUP BY 
    	p.product_id,
        p.product_name
    ORDER BY 
    	revenue DESC;

| product_id | product_name | revenue |
| ---------- | ------------ | ------- |
| 13         | Product M    | 420.00  |
| 10         | Product J    | 330.00  |
| 6          | Product F    | 210.00  |
| 12         | Product L    | 195.00  |
| 11         | Product K    | 180.00  |
| 3          | Product C    | 160.00  |
| 9          | Product I    | 150.00  |
| 8          | Product H    | 135.00  |
| 2          | Product B    | 135.00  |
| 7          | Product G    | 120.00  |
| 5          | Product E    | 90.00   |
| 4          | Product D    | 75.00   |
| 1          | Product A    | 50.00   |

---

Find the day with the highest revenue.

    WITH date_ranked_by_revenue AS 
    	(SELECT 
         	DATE(o.order_date) AS day_highest_revenue,
         	RANK() OVER(ORDER BY SUM(oi.quantity * p.price) DESC) AS date_rank_revenue
         FROM 
         	orders o
         		INNER JOIN order_items oi ON o.order_id = oi.order_id
         		INNER JOIN products p ON oi.product_id = p.product_id
        GROUP BY 
        	o.order_date)
    SELECT 
    	day_highest_revenue
    FROM 
    	date_ranked_by_revenue 
    WHERE 
    	date_rank_revenue = 1;

| day_highest_revenue      |
| ------------------------ |
| 2023-05-16T00:00:00.000Z |

---

Find the first order (by date) for each customer.

    WITH orders_by_customers AS 
    	(SELECT 
         	customer_id,
         	order_date,
         	RANK() OVER(PARTITION BY customer_id ORDER BY order_date) AS order_rank 
         FROM 
         	orders)
    SELECT 
    	order_date 
    FROM 
    	orders_by_customers 
    WHERE 
    	order_rank = 1;

| order_date               |
| ------------------------ |
| 2023-05-01T00:00:00.000Z |
| 2023-05-02T00:00:00.000Z |
| 2023-05-03T00:00:00.000Z |
| 2023-05-07T00:00:00.000Z |
| 2023-05-08T00:00:00.000Z |
| 2023-05-09T00:00:00.000Z |
| 2023-05-10T00:00:00.000Z |
| 2023-05-11T00:00:00.000Z |
| 2023-05-12T00:00:00.000Z |
| 2023-05-13T00:00:00.000Z |
| 2023-05-14T00:00:00.000Z |
| 2023-05-15T00:00:00.000Z |
| 2023-05-16T00:00:00.000Z |

---

Find the top 3 customers who have ordered the most distinct products

    WITH customers_ranked_distinct_products AS 
      (SELECT 
          o.customer_id,
          DENSE_RANK() OVER(ORDER BY COUNT(DISTINCT oi.product_id) DESC) AS distinct_products_rank
      FROM 
          orders o INNER JOIN order_items oi 
          ON 
          o.order_id = oi.order_id
      GROUP BY 
      	o.customer_id)
    SELECT 
    	first_name,
        last_name 
    FROM 
    	customers 
    WHERE 
    	customer_id IN (SELECT customer_id 
                        FROM customers_ranked_distinct_products
                        WHERE distinct_products_rank = 1);

| first_name | last_name |
| ---------- | --------- |
| John       | Doe       |
| Jane       | Smith     |
| Bob        | Johnson   |

---

Which product has been bought the least in terms of quantity

    WITH qty_ordered_ranked AS
    	(SELECT 
         	product_id,
         	RANK() OVER(ORDER BY SUM(quantity) DESC) AS qty_ordered_rank 
         FROM 
         	order_items
         GROUP BY 
        	product_id)
         SELECT 
         	product_id,
            product_name
         FROM 
         	products
         WHERE 
         	product_id IN (SELECT product_id 
                           FROM qty_ordered_ranked
                           WHERE qty_ordered_rank = 1);

| product_id | product_name |
| ---------- | ------------ |
| 2          | Product B    |

---

What is the median order total?

    WITH order_totals AS 
    	(SELECT 
         	oi.order_id,
         	SUM(oi.quantity * p.price) AS order_total
         FROM 
         	order_items oi INNER JOIN products p
         	ON 
         	oi.product_id = p.product_id 
         GROUP BY 
         	oi.order_id)
    SELECT 
    	PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY order_total ASC) AS median_order_total
    FROM 
    	order_totals;

| median_order_total |
| ------------------ |
| 112.5              |

---

For each order, determine if it was ‘Expensive’ (total over 300), ‘Affordable’ (total over 100), or ‘Cheap’.

    WITH order_totals AS
      (SELECT 
       	oi.order_id,
        SUM(oi.quantity * p.price) AS order_total
       FROM 
       	order_items oi INNER JOIN products p
       	ON 
       	oi.product_id = p.product_id
       GROUP BY 
       	oi.order_id)
    SELECT 
    	order_id,
        CASE 
        	WHEN order_total > 300 THEN 'Expensive'
            WHEN order_total > 100 AND order_total <= 300 THEN 'Affordable'
            ELSE 'Cheap'
            END AS order_classification
    FROM 
    	order_totals
    ORDER BY 
    	order_id;

| order_id | order_classification |
| -------- | -------------------- |
| 1        | Cheap                |
| 2        | Cheap                |
| 3        | Cheap                |
| 4        | Cheap                |
| 5        | Cheap                |
| 6        | Cheap                |
| 7        | Cheap                |
| 8        | Affordable           |
| 9        | Affordable           |
| 10       | Affordable           |
| 11       | Affordable           |
| 12       | Cheap                |
| 13       | Affordable           |
| 14       | Affordable           |
| 15       | Affordable           |
| 16       | Expensive            |

---

Find customers who have ordered the product with the highest price.

    WITH products_ranked_by_price AS 
    	(SELECT 
         	product_id,
         	RANK() OVER(ORDER BY price DESC) AS price_rank 
         FROM 
         	products)
    SELECT 
    	c.customer_id,
        c.first_name,
        c.last_name
    FROM 
    	customers c 
        	INNER JOIN orders o ON c.customer_id = o.customer_id 
        	INNER JOIN order_items oi ON o.order_id = oi.order_id 
    WHERE 
    	oi.product_id IN (SELECT product_id 
                          FROM products_ranked_by_price
                          WHERE price_rank = 1);

| customer_id | first_name | last_name |
| ----------- | ---------- | --------- |
| 8           | Ivy        | Jones     |
| 13          | Sophia     | Thomas    |

---

