**Schema (PostgreSQL v15)**

    CREATE TABLE customers (
        customer_id integer PRIMARY KEY,
        first_name varchar(100),
        last_name varchar(100),
        email varchar(100)
    );
    
    CREATE TABLE products (
        product_id integer PRIMARY KEY,
        product_name varchar(100),
        price decimal
    );
    
    CREATE TABLE orders (
        order_id integer PRIMARY KEY,
        customer_id integer,
        order_date date
    );
    
    CREATE TABLE order_items (
        order_id integer,
        product_id integer,
        quantity integer
    );
    
    INSERT INTO customers (customer_id, first_name, last_name, email) VALUES
    (1, 'John', 'Doe', 'johndoe@email.com'),
    (2, 'Jane', 'Smith', 'janesmith@email.com'),
    (3, 'Bob', 'Johnson', 'bobjohnson@email.com'),
    (4, 'Alice', 'Brown', 'alicebrown@email.com'),
    (5, 'Charlie', 'Davis', 'charliedavis@email.com'),
    (6, 'Eva', 'Fisher', 'evafisher@email.com'),
    (7, 'George', 'Harris', 'georgeharris@email.com'),
    (8, 'Ivy', 'Jones', 'ivyjones@email.com'),
    (9, 'Kevin', 'Miller', 'kevinmiller@email.com'),
    (10, 'Lily', 'Nelson', 'lilynelson@email.com'),
    (11, 'Oliver', 'Patterson', 'oliverpatterson@email.com'),
    (12, 'Quinn', 'Roberts', 'quinnroberts@email.com'),
    (13, 'Sophia', 'Thomas', 'sophiathomas@email.com');
    
    INSERT INTO products (product_id, product_name, price) VALUES
    (1, 'Product A', 10.00),
    (2, 'Product B', 15.00),
    (3, 'Product C', 20.00),
    (4, 'Product D', 25.00),
    (5, 'Product E', 30.00),
    (6, 'Product F', 35.00),
    (7, 'Product G', 40.00),
    (8, 'Product H', 45.00),
    (9, 'Product I', 50.00),
    (10, 'Product J', 55.00),
    (11, 'Product K', 60.00),
    (12, 'Product L', 65.00),
    (13, 'Product M', 70.00);
    
    INSERT INTO orders (order_id, customer_id, order_date) VALUES
    (1, 1, '2023-05-01'),
    (2, 2, '2023-05-02'),
    (3, 3, '2023-05-03'),
    (4, 1, '2023-05-04'),
    (5, 2, '2023-05-05'),
    (6, 3, '2023-05-06'),
    (7, 4, '2023-05-07'),
    (8, 5, '2023-05-08'),
    (9, 6, '2023-05-09'),
    (10, 7, '2023-05-10'),
    (11, 8, '2023-05-11'),
    (12, 9, '2023-05-12'),
    (13, 10, '2023-05-13'),
    (14, 11, '2023-05-14'),
    (15, 12, '2023-05-15'),
    (16, 13, '2023-05-16');
    
    INSERT INTO order_items (order_id, product_id, quantity) VALUES
    (1, 1, 2),
    (1, 2, 1),
    (2, 2, 1),
    (2, 3, 3),
    (3, 1, 1),
    (3, 3, 2),
    (4, 2, 4),
    (4, 3, 1),
    (5, 1, 1),
    (5, 3, 2),
    (6, 2, 3),
    (6, 1, 1),
    (7, 4, 1),
    (7, 5, 2),
    (8, 6, 3),
    (8, 7, 1),
    (9, 8, 2),
    (9, 9, 1),
    (10, 10, 3),
    (10, 11, 2),
    (11, 12, 1),
    (11, 13, 3),
    (12, 4, 2),
    (12, 5, 1),
    (13, 6, 3),
    (13, 7, 2),
    (14, 8, 1),
    (14, 9, 2),
    (15, 10, 3),
    (15, 11, 1),
    (16, 12, 2),
    (16, 13, 3);
    

---


Which product has the highest price? Only return a single row.

SELECT 
    product_name
FROM 
    products 
WHERE 
    price IN (SELECT MAX(price)
              FROM products);

| product_name |
| ------------ |
| Product M    |

---

Which customer has made the most orders?

WITH order_count_ranked AS 
    (SELECT 
        customer_id,
        RANK() OVER(ORDER BY COUNT(DISTINCT order_id) DESC) AS order_count_rank
    FROM 
        orders
    GROUP BY 
        customer_id)
SELECT 
    first_name,
    last_name 
FROM 
    customers 
WHERE 
    customer_id IN (SELECT customer_id 
                    FROM order_count_ranked 
                    WHERE order_count_rank = 1);

| first_name | last_name |
| ---------- | --------- |
| John       | Doe       |
| Jane       | Smith     |
| Bob        | Johnson   |

---

What’s the total revenue per product?

    SELECT 
    	p.product_id,
        p.product_name,
        SUM(oi.quantity * p.price) AS revenue 
    FROM 
    	products p INNER JOIN order_items oi 
        ON 
        p.product_id = oi.product_id 
    GROUP BY 
    	p.product_id,
        p.product_name
    ORDER BY 
    	revenue DESC;

| product_id | product_name | revenue |
| ---------- | ------------ | ------- |
| 13         | Product M    | 420.00  |
| 10         | Product J    | 330.00  |
| 6          | Product F    | 210.00  |
| 12         | Product L    | 195.00  |
| 11         | Product K    | 180.00  |
| 3          | Product C    | 160.00  |
| 9          | Product I    | 150.00  |
| 8          | Product H    | 135.00  |
| 2          | Product B    | 135.00  |
| 7          | Product G    | 120.00  |
| 5          | Product E    | 90.00   |
| 4          | Product D    | 75.00   |
| 1          | Product A    | 50.00   |

---

Find the day with the highest revenue.

    WITH date_ranked_by_revenue AS 
    	(SELECT 
         	DATE(o.order_date) AS day_highest_revenue,
         	RANK() OVER(ORDER BY SUM(oi.quantity * p.price) DESC) AS date_rank_revenue
         FROM 
         	orders o
         		INNER JOIN order_items oi ON o.order_id = oi.order_id
         		INNER JOIN products p ON oi.product_id = p.product_id
        GROUP BY 
        	o.order_date)
    SELECT 
    	day_highest_revenue
    FROM 
    	date_ranked_by_revenue 
    WHERE 
    	date_rank_revenue = 1;

| day_highest_revenue      |
| ------------------------ |
| 2023-05-16T00:00:00.000Z |

---

Find the first order (by date) for each customer.

    WITH orders_by_customers AS 
    	(SELECT 
         	customer_id,
         	order_date,
         	RANK() OVER(PARTITION BY customer_id ORDER BY order_date) AS order_rank 
         FROM 
         	orders)
    SELECT 
    	order_date 
    FROM 
    	orders_by_customers 
    WHERE 
    	order_rank = 1;

| order_date               |
| ------------------------ |
| 2023-05-01T00:00:00.000Z |
| 2023-05-02T00:00:00.000Z |
| 2023-05-03T00:00:00.000Z |
| 2023-05-07T00:00:00.000Z |
| 2023-05-08T00:00:00.000Z |
| 2023-05-09T00:00:00.000Z |
| 2023-05-10T00:00:00.000Z |
| 2023-05-11T00:00:00.000Z |
| 2023-05-12T00:00:00.000Z |
| 2023-05-13T00:00:00.000Z |
| 2023-05-14T00:00:00.000Z |
| 2023-05-15T00:00:00.000Z |
| 2023-05-16T00:00:00.000Z |

---

Find the top 3 customers who have ordered the most distinct products
Which product has been bought the least in terms of quantity?
What is the median order total?
For each order, determine if it was ‘Expensive’ (total over 300), ‘Affordable’ (total over 100), or ‘Cheap’.
Find customers who have ordered the product with the highest price.
