**Schema (PostgreSQL v13)**

    CREATE SCHEMA dannys_diner;
    SET search_path = dannys_diner;
    
    CREATE TABLE sales (
      "customer_id" VARCHAR(1),
      "order_date" DATE,
      "product_id" INTEGER
    );
    
    INSERT INTO sales
      ("customer_id", "order_date", "product_id")
    VALUES
      ('A', '2021-01-01', '1'),
      ('A', '2021-01-01', '2'),
      ('A', '2021-01-07', '2'),
      ('A', '2021-01-10', '3'),
      ('A', '2021-01-11', '3'),
      ('A', '2021-01-11', '3'),
      ('B', '2021-01-01', '2'),
      ('B', '2021-01-02', '2'),
      ('B', '2021-01-04', '1'),
      ('B', '2021-01-11', '1'),
      ('B', '2021-01-16', '3'),
      ('B', '2021-02-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-07', '3');
     
    
    CREATE TABLE menu (
      "product_id" INTEGER,
      "product_name" VARCHAR(5),
      "price" INTEGER
    );
    
    INSERT INTO menu
      ("product_id", "product_name", "price")
    VALUES
      ('1', 'sushi', '10'),
      ('2', 'curry', '15'),
      ('3', 'ramen', '12');
      
    
    CREATE TABLE members (
      "customer_id" VARCHAR(1),
      "join_date" DATE
    );
    
    INSERT INTO members
      ("customer_id", "join_date")
    VALUES
      ('A', '2021-01-07'),
      ('B', '2021-01-09');

---

**Query #1**
-- 1. What is the total amount each customer spent at the restaurant?
    SELECT 
    	s.customer_id,
        SUM(s.product_id * m.price) AS total_amount_spent 
    FROM 
    	dannys_diner.sales s INNER JOIN dannys_diner.menu m
        ON 
        s.product_id = m.product_id 
    GROUP BY 
    	s.customer_id
    ORDER BY 
    	total_amount_spent DESC;

| customer_id | total_amount_spent |
| ----------- | ------------------ |
| A           | 178                |
| B           | 152                |
| C           | 108                |

---

**Query #2**
-- 2. How many days has each customer visited the restaurant?
    SELECT 
    	customer_id,
        COUNT(DISTINCT order_date) AS num_visits 
    FROM 
    	dannys_diner.sales 
    GROUP BY 
    	customer_id
    ORDER BY 
    	num_visits DESC;

| customer_id | num_visits |
| ----------- | ---------- |
| B           | 6          |
| A           | 4          |
| C           | 2          |

---

**Query #3**
-- 3. What was the first item from the menu purchased by each customer?
    SELECT 
    	s.customer_id,
        s.product_id,
        m.product_name
    FROM 
    	dannys_diner.sales s INNER JOIN dannys_diner.menu m
        ON 
        s.product_id = m.product_id 
    WHERE 
    	s.order_date = (SELECT MIN(order_date)
                        FROM dannys_diner.sales)
    ORDER BY 
    	s.customer_id;

| customer_id | product_id | product_name |
| ----------- | ---------- | ------------ |
| A           | 1          | sushi        |
| A           | 2          | curry        |
| B           | 2          | curry        |
| C           | 3          | ramen        |
| C           | 3          | ramen        |

---

**Query #4**
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
    WITH items_ranked AS 
      (SELECT 
          s.product_id,
          m.product_name,
          COUNT(s.product_id) AS num_orders,
       	  RANK() OVER(ORDER BY COUNT(s.product_id) DESC) AS item_rank
      FROM 
          dannys_diner.sales s INNER JOIN dannys_diner.menu m 
          ON
          s.product_id = m.product_id 
      GROUP BY 
          s.product_id,
          m.product_name)
    SELECT 
    	product_id,
        product_name,
        num_orders 
    FROM 
    	items_ranked
    WHERE 
    	item_rank = 1;

| product_id | product_name | num_orders |
| ---------- | ------------ | ---------- |
| 3          | ramen        | 8          |

---

**Query #5**
-- 5. Which item was the most popular for each customer?
    WITH items_ranked_per_customer AS 
    	(SELECT 
         	s.customer_id,
         	m.product_name,
         	COUNT(s.product_id) AS num_orders,    	
         	RANK() OVER(PARTITION BY s.customer_id ORDER BY COUNT(s. product_id) DESC) AS item_rank_customer
         FROM 
         	dannys_diner.sales s INNER JOIN dannys_diner.menu m
         	ON 
         	s.product_id = m.product_id
         GROUP BY 
         	s.customer_id,
        	m.product_name)
    SELECT 
    	customer_id,
        product_name,
        num_orders 
    FROM 
    	items_ranked_per_customer 
    WHERE 
    	item_rank_customer = 1;

| customer_id | product_name | num_orders |
| ----------- | ------------ | ---------- |
| A           | ramen        | 3          |
| B           | ramen        | 2          |
| B           | curry        | 2          |
| B           | sushi        | 2          |
| C           | ramen        | 3          |

---

**Query #6**
-- 6. Which item was purchased first by the customer after they became a member?
    WITH member_orders_ranked AS 
    	(SELECT 
         	s.customer_id,
         	s.order_date,
         	s.product_id,
         	RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date ASC) AS order_rank
         FROM 
         	dannys_diner.sales s INNER JOIN dannys_diner.members m
         	ON 
         	s.customer_id = m.customer_id
         WHERE 
         	s.order_date > m.join_date)
    SELECT 
    	mor.customer_id,
        mor.product_id,
        m.product_name 
    FROM 
    	member_orders_ranked mor INNER JOIN dannys_diner.menu m
        ON 
        mor.product_id = m.product_id
    WHERE 
    	mor.order_rank = 1;

| customer_id | product_id | product_name |
| ----------- | ---------- | ------------ |
| B           | 1          | sushi        |
| A           | 3          | ramen        |

---

**Query #7**
-- 7. Which item was purchased just before the customer became a member?
    WITH member_orders_ranked AS 
    	(SELECT 
         	s.customer_id,
         	s.order_date,
         	s.product_id,
         	RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date DESC) AS order_rank
         FROM 
         	dannys_diner.sales s INNER JOIN dannys_diner.members m
         	ON 
         	s.customer_id = m.customer_id
         WHERE 
         	s.order_date < m.join_date)
    SELECT 
    	mor.customer_id,
        mor.product_id,
        m.product_name 
    FROM 
    	member_orders_ranked mor INNER JOIN dannys_diner.menu m
        ON 
        mor.product_id = m.product_id
    WHERE 
    	mor.order_rank = 1;

| customer_id | product_id | product_name |
| ----------- | ---------- | ------------ |
| B           | 1          | sushi        |
| A           | 1          | sushi        |
| A           | 2          | curry        |

---

**Query #8**
-- 8. What is the total items and amount spent for each member before they became a member?
    WITH orders_pre_membership AS 
    	(SELECT 
         	s.customer_id,
         	s.order_date,
         	s.product_id
         FROM 
         	dannys_diner.sales s LEFT JOIN dannys_diner.members m
         	ON 
         	s.customer_id = m.customer_id 
         WHERE 
         	s.order_date < m.join_date
        	OR 
        	m.join_date IS NULL)
    SELECT 
    	opm.customer_id,
        COUNT(DISTINCT opm.product_id) AS total_items_ordered,
        SUM(m.price) AS total_amount_spent
    FROM 
    	orders_pre_membership opm INNER JOIN dannys_diner.menu m
        ON 
        opm.product_id = m.product_id
    GROUP BY 
    	opm.customer_id;

| customer_id | total_items_ordered | total_amount_spent |
| ----------- | ------------------- | ------------------ |
| A           | 2                   | 25                 |
| B           | 2                   | 40                 |
| C           | 1                   | 36                 |

---

**Query #9**
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
    SELECT 
    	s.customer_id,
        SUM(CASE WHEN m.product_name = 'sushi' THEN 2 * 10 * price ELSE 10 * price END) AS total_points 
    FROM 
    	dannys_diner.sales s INNER JOIN dannys_diner.menu m 
        ON 
        s.product_id = m.product_id 
    GROUP BY 
    	s.customer_id
    ORDER BY 
    	total_points DESC;

| customer_id | total_points |
| ----------- | ------------ |
| B           | 940          |
| A           | 860          |
| C           | 360          |

---


